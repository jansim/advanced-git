---
title: "Advanced `git`"
subtitle: "Block 3.1: GitLab CI / CD"
title-slide-attributes:
    # Background by <https://giphy.com/gifs/ralph-80s-cartoons-richie-rich-1nR6fu93A17vWZbO9c>
    data-background-image: images/backgrounds/ralph-80s-cartoons-richie-rich-1nR6fu93A17vWZbO9c.gif
    data-background-color: black
    data-background-opacity: "0.4"
---

## From before: CI / CD ü§ñ

::: {.nonincremental}

- **Continuous Integration (CI)**
  - Integration of changes from multiple developers into shared repository with automated testing.
- **Continuous Delivery / Deployment (CD)**
  - Automated deployment of changes if previous tests pass.

:::

## Continuous Integration (CI) ‚úÖ

Ensuring the quality of all code that makes it into the `main` branch.

- Automatically check...
  - different forms of tests
  - formatting
  - building / compilation
  - ... anything!
- Only allow merging if tests pass

## Continuous Delivery / Deployment (CD) üöÄ

Automatically deploy the latest state upon merge.

- Build & deploy the latest version
  - If tests in CI pass ‚úÖ
- Helps streamlining deployment
- Easier to roll-back changes

## Artifacts üè∫

Save / export files from your CI / CD pipeline.

- Typically more related to CD, but not necessarily
- Build, package and release your software
- Can help to debug failing tests
  - e.g. upload a plot from a failed test as artifact
- Example: *JOSS* renders & exports papers via artifacts üìú

:::{.fragment}
:::{.callout-note}
Be mindful when exporting / storing artifacts as they usually count towards a storage allowance.
:::
:::

# CI / CD on GitLab

## CI / CD on GitLab: Pipelines & Jobs üö∞

GitLab's CI/CD system is organized into `pipelines` which contain one or more `jobs`.

- Each `job` performs a *task*
- Multiple `jobs` can be chained / combined in a `pipeline`
- There is no clear distinction between CI/CD, it's all `jobs`

## CI / CD on GitLab: Pipelines & Jobs üö∞

![Part of the pipeline that's being run for gitlab itself.](images/screenshots/gitlab/gl-pipeline.png)

::: attribution
Repository: <https://gitlab.com/gitlab-org/gitlab>
:::

## CI / CD on GitLab: Runners üèÉ

- Jobs run in Docker containers (more later ‚è≤Ô∏è)
- These need to run *somewhere*: runners
- Runners are separate from the gitlab instance itself
  - We'll use gitlab.com here, which provides a certain amount of free "runner minutes"
- KIT does not provide runners by default
  - But you can provide / configure your own

## Developing CI / CD Pipelines

- Option 1: Make changes, push, repeat ‚ôªÔ∏è
- Option 2: Use tools to test locally üè°
  - [`gitlab-runner exec`](https://docs.gitlab.com/runner/install/)
  - [`gitlab-ci-local`](https://github.com/firecow/gitlab-ci-local)

# Questions? {background-opacity="0.4" background-image="images/backgrounds/questions.gif" background-position="top"}

## Practical: Deploying a Website {background-color="black"}

You can deploy your own website on gitlab.com using GitLab Pages and powered by GitLab CI / CD.

1. Go to the fork of the website template ([jansim/website-template](https://gitlab.com/jansim/website-template)) you made earlier.
2. Make at least one commit to let the CI run
3. Go to `Build` > `Pipelines` on the left to check whether everything ran correctly
4. Go to `Deploy` > `Pages` to check whether the configuration for deployments was correct
5. The deployment should look roughly like [this](https://jansim.gitlab.io/website-template).

# Going Deeper: <br> `.gitlab-ci.yml` {background-color="black" background-opacity="0.4" background-image="images/backgrounds/leonardo-dicaprio-inception-inceptionedit-4nF0gVfYYIGdi.gif" background-position="top"}

::: attribution
Background: https://giphy.com/gifs/leonardo-dicaprio-inception-inceptionedit-4nF0gVfYYIGdi
:::

## Detour: (Docker) Containers üêã

- Collection of software and its dependencies
- Kind of like a mini-virtual machine
- Identified by an image name (+ version) e.g. `ubuntu:20.04`, `postgres:14`, `...`
- Docker is the biggest company in the space, but open-source alternatives exist
- Really useful for reproducible environments & deployments

:::{.fragment}
‚û°Ô∏è GitLab CI / CD jobs run in Docker containers
:::

## The magic file ‚ú®

GitLab CI / CD pipelines are almost completely configured via a single file called `.gitlab-ci.yml`.

- `.gitlab-ci.yml` is just a normal file in the repository and tracked via `git`
- Only a few administrative settings are made outside of this
- The GitLab UI has some helpful UI to create one from a template

## The magic file: `.gitlab-ci.yml` ‚ú®

```yml
# .gitlab-ci.yml
stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job: # This job runs in the test stage.
  stage: test  # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
```

## A more complicated example üßô

```yml
# .gitlab-ci.yml
stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  image: node
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - "build/"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint-markdown:
  stage: test
  image: node
  dependencies: []
  script:
    - npm install markdownlint-cli2 --global
    - markdownlint-cli2 -v
    - markdownlint-cli2 "blog/**/*.md" "docs/**/*.md"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test-html:
  stage: test
  image: node
  dependencies:
    - build-job
  script:
    - npm install --save-dev htmlhint
    - npx htmlhint --version
    - npx htmlhint build/
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages:
  stage: deploy
  dependencies:
    - build-job
  script:
    - mv build/ public/
  artifacts:
    paths:
      - "public/"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
```

## Major Practical: Creating your own real-world Pipeline{background-color="black"}

::: {.nonincremental}

1. Build teams of ~ 3 people
2. Create a new repository and set up a sample CI/CD pipeline in a language you work with on a day-to-day basis
3. Ideally, this is a stepping stone for a CI/CD you'll use in production

- Reference: https://docs.gitlab.com/ee/ci/yaml/
- Templates: https://docs.gitlab.com/ee/ci/examples/#cicd-templates

:::
