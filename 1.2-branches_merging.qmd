---
title: "Advanced `git`"
subtitle: "Block 1.2: Branches, Merging & More"
---

# Alternate Realities: <br> `git branches` {background-color="black" background-opacity="0.7" background-image="images/backgrounds/suganth-V1YEEItoOTE-unsplash.jpg"}

::: attribution
Background: https://unsplash.com/photos/V1YEEItoOTE
:::

## What are git branches? üå≥

- Branches allow you to have different versions of your code within the same repository next to each other
- You can switch back and forth between branches
- In the end you can merge your changes back into your `main` branch

:::{.callout-note}
The default branch used to be called `master`, this was more-or-less recently changed to `main`, but not all repositories have changed yet.
:::

## What are git branches? üå≤ {background-color="#5cbcfc"}

![Example of a repository history with branching](images/screenshots/learngitbranching/branched.png)

## Creating new branches

- There are two ways to create new branches
- `git checkout -b my-branch` ‚úÖ
  - Create a new branch and immediately check it out
- `git branch my-branch` ‚ùå
  - Create a new branch, but **don't** check it out

```bash
git checkout -b my-branch
# Switched to a new branch 'my-branch'
```

## Working on branches

- So far we have been working on a single branch: `main`
- Nothing changes when working with multiple branches, you just have to keep an eye on your current branch

```bash
git status
# On branch my-branch
# nothing to commit, working tree clean
```

## Switching branches

You can switch branches with `git checkout` (as we've already done earlier)

```bash
git checkout my-branch
```

:::{.callout-tip}
There's no more `-b` when the branch already exists
:::

:::{.callout-note}
You can also use `git switch my-branch`, but this command is still experimental right now and may change.
:::

## Bringig it all together: Merging

- You can combine two different branches by merging them with each other
- `git merge my-branch`
  - You will merge the branch that you name in the command *into* the one you are currently on
  - In most cases you will want to be on the `main` branch when using `git merge` (but not always!)
- Merging will create a new "merge" commit

## Bringig it all together: Merging

:::{.callout-note}
Only branches with a shared history can be merged, but this should (almost) always be the case.
:::

## Visual Example of Merging {background-color="#5cbcfc"}

![Example of a merged repository history](images/screenshots/learngitbranching/merged.png)

::: attribution
Background: https://giphy.com/gifs/berlin-demo-govid-loAFGkJxYzgxu3NKnZ
:::

## Practical: Branches and merging {background-color="black"}

::: {.nonincremental}

1. Go back to your Terminal in `git-example`
2. Create a new branch called `feature/vegeterian`
    - Make sure to also checkout that branch, you can check whether you're on it with `git status`
3. Add a commit (with a new vegetarian recipe) on that new branch
4. Go back to `main`
5. Merge the `feature/vegeterian` branch into `main`

:::

# The Ugly Side of `git`: Merge Conflicts {background-color="black" background-opacity="0.5" background-image="images/backgrounds/git-merge-cFkiFMDg3iFoI.gif"}

## What are Merge Conflicts?

- `git` is very smart in the way it combines changes from two branches
  - **But** there's not always a clear solution
- If git doesn't know how to merge the two branches, we get a *merge conflict*
  - Merge conflicts have to be manually resolved (by us)

## How to Get a Merge Conflict üß®

And how to avoid it.

- Merge conflcits occur when there are edits to the same file (and at the same location) on two different branches
- If you merge your branches / edits before making more changes, you can avoid conflicts

## Merge Conflicts: Illustration (1)

![Starting situation, each box corresponds to the file's contents in a commit](images/drawings/merge-conflict-start.svg)

## Merge Conflicts: Illustration (2)

![The merge conflict arises because both change the same line](images/drawings/merge-conflict-end.svg)

## Merge Conflicts: Illustration (3)

![We could've avoided the merge conflict, by merging main into feature before doing the change on feature](images/drawings/merge-conflict-avoid.svg)

## Resolving Merge Conflicts

- To resolve a merge conflict, we will have to pick one of the two versions
  - Once a solution is picked for every conflict you can commit the solution and the merge continues / finishes
- Picking a solution is easiest to do by using GUI tools
  - Both Sourcetree and VSCode have great UIs for this

# *OPTIONAL DEMO:* Resolving merge conflicts in VS Code {background-color="black" background-opacity="0.5" background-image="images/backgrounds/iontelevision-fire-chicago-hose-qkTA7B5umJaEwnQ3bW.gif"}

::: attribution
Background: https://giphy.com/gifs/iontelevision-fire-chicago-hose-qkTA7B5umJaEwnQ3bW
:::

# *Practical:* Creating & Resolving a Merge Conflict {background-color="black"}

## Practical: Rock-Paper-Scissors ü™®üìú‚úÇÔ∏è {background-color="black"}

::: {.nonincremental}

1. Create a new file called `conflict.txt`
2. Write the following lines into your file (including empty lines)

```text
Round 1

Round 2

Round 3

üèÅ
```

:::

## Practical: Setup {background-color="black"}

::: {.nonincremental}

3. Create a new branch called `my-turn` and check it out
    - Double check whether you checked out the correct branch with `git status`
4. We're done with the preparations ‚ú®

:::

## Practical: Rock-Paper-Scissors {background-color="black"}

For each of the three rounds, write your choice of rock ü™®, paper üìú or scissors ‚úÇÔ∏è.

## Practical: Rock-Paper-Scissors {background-color="black"}

5. Check out the `main` branch again
6. Add in *my* choices for each round

::: {.fragment}

```text
Round 1
paper üìú
Round 2
rock ü™®
Round 3
scissors ‚úÇÔ∏è
```

:::

## Practical: The Actual Conflcit {background-color="black"}

7. Use `git merge` to merge the `my-turn` branch into your `main` branch
8. Explore the files in the resulting merge conflict
9. For each round, combine the input from both sides as follows and add who won
10. Resolve the merge conflict
11. How many points does everyone have?

## Rebasing: The Alternative to Merging

- You can also combine two branches by rebasing them (instead of merging)
- When rebasing, all extra commits on your current branch will be moved to the target branch
  - This alters the affected commits ‚ÄºÔ∏è
  - Leads to a single history
- Use with caution

# Questions? {background-opacity="0.4" background-image="images/backgrounds/questions.gif" background-position="top"}

::: attribution
More Info: <https://www.atlassian.com/git/tutorials/merging-vs-rebasing>
:::

## Rebasing: The Alternative to Merging {background-color="#5cbcfc"}

:::: {.columns}

::: {.column .fragment width="50%"}

Merging

![](images/screenshots/learngitbranching/merged.png){width=65%}

:::

::: {.column .fragment width="50%"}

Rebasing

![](images/screenshots/learngitbranching/rebased.png){width=65%}

:::

::::

## Practical: *learngitbranching* {background-color="black"}

1. Form teams of 2 people each
2. Open <https://learngitbranching.js.org/?NODEMO> (the last part is important)
3. Create a medium complex graph, by playing around with commits, branches, merging and rebasing
4. Reconstruct the graph created by your partner (and vice versa)

## *End of Block* üéâ {background-color="black" background-opacity="0.2" background-image="images/backgrounds/kaiser.jpg"}

:::{.r-fit-text}
Any Questions?
:::

[[üè° Back to Overview]](./index.html)

[[‚è©Ô∏è Next Block]](./2.1-collaboration-pull-requests.html) 
